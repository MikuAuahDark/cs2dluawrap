-- CS2D Lua wrapper
-- Copyright (c) 2020 Miku AuahDark
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the "Software"),
-- to deal in the Software without restriction, including without limitation
-- the rights to use, copy, modify, merge, publish, distribute, sublicense,
-- and/or sell copies of the Software, and to permit persons to whom the
-- Software is furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-- FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-- DEALINGS IN THE SOFTWARE.

-- usage: generate_def.lua <cs2dluafunc.h>

local arg = {...}
local cs2dLuaFunc = assert(arg[1], "cs2dluafunc.h")

-- Write header
io.write((([[
/* This header is generated by generate_def.lua */

]]):gsub("\r\n", "\n")))

local function trim(s)
	return (s:gsub("^%s*(.-)%s*$", "%1"))
end

local function split(text, delim, removeempty)
	local t = {}

	local b = 0
	while b ~= nil do
		local c, d = text:find(delim, b + 1, true)
		c = c or (#text + 1)

		t[#t + 1] = text:sub(b + 1, c - 1)
		b = d
	end

	if removeempty then
		local a = #t
		while a > 0 and #t[a] == 0 do
			t[a] = nil
			a = a - 1
		end
	end

	return t
end

for line in io.lines(cs2dLuaFunc) do
	if line:find("/*MATCHGEN*/", 1, true) then
		local retType, name, paramList = line:match("^%s*/%*MATCHGEN%*/([^%)]+)%(%*([^%)]+)%)%s*%(([^%)]+)%);")

		-- Trim
		retType = trim(retType)
		name = trim(name)
		paramList = trim(paramList)

		-- Parameter list
		local params = split(trim(paramList), ",")
		local plist = {}
		for i = 1, #params do
			local p = trim(params[i])
			if p ~= "void" then
				local c = string.char(i + 96)
				params[i] = p.." "..c
				plist[#plist + 1] = c
			else
				params[i] = p
			end
		end

		local useLuaLib = name:find("luaL_") == 1 or name:find("luaopen_") == 1

		-- Write function wrapper
		io.write(useLuaLib and "LUALIB_API " or "LUA_API ", retType, " ", name, "(", table.concat(params, ", "), ")\n{\n")
		if retType ~= "void" then
			io.write("\treturn luaFunction.", name, "(", table.concat(plist, ", "), ");\n}\n\n")
		else
			io.write("\tluaFunction.", name, "(", table.concat(plist, ", "), ");\n}\n\n")
		end
	end
end
